@startuml
package GeometryLibrary { 

  
class Fractures {
        + NumFractures: unsigned int
        + IdFractures: vector<unsigned int>
        + CoordinatesVertice: vector<MatrixXd>
        + lenghtMaxEdges: vector<double>
        + vettoreNormalePiano: vector<Vector3d>
        + numVertices: vector<unsigned int>
        + TraceIdsxFracture: map<unsigned int, list<unsigned int>>
        + Fractures()
        + Fractures(IdFractures, CoordinatesVertice)
        + vector<double> lenghtMax(CoordinatesVertice)
        + vector<double> baricentro(CoordinatesVertice)
        .. Non member function ..
        + void ImportFR(const string &filename, Fractures& fracture)
        + void CalcoloTracce(Fractures& fracture, Traces& trace)
        + bool secondoOutput(const string &filename, const Fractures& fracture, Traces& trace)
        .. TEST on FRACTURES ..
TestFractures
    }

    class Traces {
        + numTraces: unsigned int
        + IdTraces: vector<unsigned int>
        + CoordinatesEstremiTraces: vector<Matrix<double, 3, 2>>
        + lengthTraces: vector<double>
        + vectorTips: vector<bool>
        + IdsFractures: vector<array<unsigned int, 2>>
        + TraceIdsPassxFracture: vector<vector<unsigned int>>
        + TraceIdsNoPassxFracture: vector<vector<unsigned int>>
        + Traces()
        + Traces(TraceIdsPassxFracture, TraceIdsNoPassxFracture)
        .. Non member function..
        + int distinzioneTipoTraccia1(Traces& trace, 
         const vector<Vector3d>& vecI, const vector<Vector3d>& vecJ,
          const Vector3d& Point, Vector3d& t, unsigned int i, unsigned int j)
        + void distinzioneTipoTraccia2(Fractures& fracture, 
         Traces& trace, const int i, const int j )
        + unsigned int Calcolo_par(Vector3d& t, Vector3d& Point, 
          int i, vector<Vector3d>& vec, Fractures& fracture)
        + bool exportFR1(const string &filename)
        + bool exportFR1(const string &filename, const Traces& trace)
        .. TEST on TRACES ..
TestdistinzioneTipoTraccia1
TestCalcolo_par
    }


package UtilityFunctions {
    class InlineFunctions {
        + Vector3d vec_product(v1, v2)
        + double euclidean_distance(a,b)
        + void inserimento_map(pass, idpar, trace)
        + bool combinazione_convessa(v1, v2, p)
        + bool checkInserimento(Punto0, VettoreCoordinateIn0D)
    }
}

package UtilityFunctions {
    class UtilsFunction {
        + bool check_sphere( bar1,bar2, l1, l2)
        + bool system_solution(Vector3d& n1, 
         Vector3d& n2, array<double, 3>& b1, 
         array<double, 3>& b2, Vector3d& t, Vector3d& Point)
        + bool soluzione_sistema3x2(Vector3d& t, Vector3d& V1,
          Vector3d& V2, Vector3d& Point, Vector3d& Punto0)
        + void BubbleSort_mod(vector<array<T,2>>& data)
    }
}


    class Polygons {
        + NumberCell0D: unsigned int
        + Cell0DId: vector<unsigned int>
        + Cell0DCoordinates: vector<Vector3d>
        + Cell0DMarkers: map<unsigned int, list<unsigned int>>
        + NumberCell1D: unsigned int
        + Cell1DId: vector<unsigned int>
        + Cell1DVertices: vector<Vector2i>
        + Cell1DMarkers: map<unsigned int, list<unsigned int>>
        + NumberCell2D: unsigned int
        + Cell2DId: vector<unsigned int>
        + NumberVertices: list<unsigned int>
        + Cell2DVertices: vector<vector<unsigned int>>
        + NumberEdges: list<unsigned int>
        + Cell2DEdges: vector<vector<unsigned int>>
        + SequenzeXpunto: vector<MatrixXd>
        + CoordinatesPunto: vector<Vector3d>

        .. Methods ..     # metodo?
        + void gedimInterface(vector<vector<unsigned int>>&) #paraview?
        + void ExportPolygons(â€¦%)
        .. Non member function ..
        + void MemorizzaVerticiPassanti_Cell0Ds(const Fractures& fracture,
            const Traces& trace, Polygons& sottoPoligono, unsigned int z)
        + void MemorizzaVerticiNonPassanti_Cell0Ds (const Fractures& fracture, 
           const Traces& trace, Polygons& sottoPoligono, unsigned int z, 
             vector<Matrix<double, 3, 4>>& NuoviEstremi)
        + void Creazioni_Sequenze_Passanti(const Fractures& fracture, 
            const Traces& trace, Polygons& sottoPoligono, unsigned int z)
        + void Creazioni_Sequenze_NONPassanti(const Fractures& fracture,
           const Traces& trace, Polygons& sottoPoligono, unsigned int z, 
           vector<Matrix<double, 3, 4>>& NuoviEstremi)
        + void Creo_sottopoligono(num_fracture,  num_sottopoligono, 
          list<unsigned int> listaIdVertici, Polygons& poligoni, Fractures& fracture)
         .. TEST on POLYGONS .. 
         TestSottopoligoni
}
}

package Vettore {
Class operatoreAdHocVettore { 
  + bool operator==(const VectorXd &v1, const VectorXd &v2) 
} 
}

 
note "Gedim is an external library" as nomeNota
Gedim -- Polygons : gedimInterface



Traces "many" --o "1" Fractures : contained within
Polygons "many" --o "1" Fractures : is made up
@enduml
